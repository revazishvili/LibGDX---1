LibGDX არის ღია წყაროს კროსპლატფორმული ჯავას ბიბლიოთეკა, რომელიც გამოიყენება სამგანზომილებიანი და ორგანზომილებიანი თამაშების შესაქმნელად. ის შეიცავს მოდულებს გრაფიკის, ხმის, ინტერაქციის, ფიზიკისა და სხვა ფუნქციონალის მხარდაჭერისთვის. LibGDX-ის უპირატესობებია:

კროსპლატფორმულობა: თამაშები შესაძლებელია განხორციელდეს Windows, Linux, macOS, Android, iOS, ბრაუზერსა და WebGL-ზე.
OpenGL და OpenGL ES მხარდაჭერა გრაფიკული რენდერინგისთვის.
სცენის გრაფის მხარდაჭერა სცენებისა და ობიექტების ჰიერარქიული სტრუქტურირებისთვის.
2D და 3D გრაფიკული რენდერინგი.
ფიზიკური სიმულაციები Box2D და Bullet ბიბლიოთეკების მხარდაჭერით.
ხმის მხარდაჭერა OpenAL-ის საშუალებით.
ინსტრუმენტები თამაშების შექმნის, ტესტირებისა და დებაგინგისთვის.

// Main.java
package com.example.game;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class Main extends ApplicationAdapter {
    SpriteBatch batch;

    @Override
    public void create() {
        batch = new SpriteBatch();
    }

    @Override
    public void render() {
        Gdx.gl.glClearColor(1, 0, 0, 1); // წითელი ფონი
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        batch.begin();
        // რენდერინგის კოდი აქ
        batch.end();
    }

    @Override
    public void dispose() {
        batch.dispose();
    }
}


#########################################################################
სურათის რენდერინგი:


// Main.java
import com.badlogic.gdx.graphics.Texture;

public class Main extends ApplicationAdapter {
    SpriteBatch batch;
    Texture img;

    @Override
    public void create() {
        batch = new SpriteBatch();
        img = new Texture("badlogic.jpg"); // სურათის ჩატვირთვა
    }

    @Override
    public void render() {
        Gdx.gl.glClearColor(1, 1, 1, 1); // თეთრი ფონი
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        batch.begin();
        batch.draw(img, 0, 0); // სურათის რენდერინგი
        batch.end();
    }

    @Override
    public void dispose() {
        batch.dispose();
        img.dispose();
    }
}


##################################################

ობიექტის მოძრაობა:

// Main.java
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;

public class Main extends ApplicationAdapter {
    ShapeRenderer shapeRenderer;
    float x = 0, y = 0;

    @Override
    public void create() {
        shapeRenderer = new ShapeRenderer();
    }

    @Override
    public void render() {
        Gdx.gl.glClearColor(0, 0, 0, 1); // შავი ფონი
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // ობიექტის გადაადგილება
        x += Gdx.graphics.getDeltaTime() * 50;
        y += Gdx.graphics.getDeltaTime() * 50;

        shapeRenderer.begin(ShapeType.Filled);
        shapeRenderer.setColor(1, 1, 0, 1); // ყვითელი ფერი
        shapeRenderer.rect(x, y, 50, 50); // მართკუთხედის რენდერინგი
        shapeRenderer.end();
    }

    @Override
    public void dispose() {
        shapeRenderer.dispose();
    }
}


#######################################
კლავიატურის შენატანები:

// Main.java
import com.badlogic.gdx.Input.Keys;

public class Main extends ApplicationAdapter {
    ShapeRenderer shapeRenderer;
    float x = 0, y = 0;

    @Override
    public void create() {
        shapeRenderer = new ShapeRenderer();
    }

    @Override
    public void render() {
        Gdx.gl.glClearColor(0, 0, 0, 1); // შავი ფონი
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // კლავიატურის შენატანების დამუშავება
        if (Gdx.input.isKeyPressed(Keys.LEFT)) x -= 200 * Gdx.graphics.getDeltaTime();
        if (Gdx.input.isKeyPressed(Keys.RIGHT)) x += 200 * Gdx.graphics.getDeltaTime();
        if (Gdx.input.isKeyPressed(Keys.UP)) y += 200 * Gdx.graphics.getDeltaTime();
        if (Gdx.input.isKeyPressed(Keys.DOWN)) y -= 200 * Gdx.graphics.getDeltaTime();

        shapeRenderer.begin(ShapeType.Filled);
        shapeRenderer.setColor(1, 1, 0, 1); // ყვითელი ფერი
        shapeRenderer.rect(x, y, 50, 50); // მართკუთხედის რენდერინგი
        shapeRenderer.end();
    }

    @Override
    public void dispose() {
        shapeRenderer.dispose();
    }
}

################################################

სცენის გრაფის გამოყენება:


// Main.java
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;

public class Main extends ApplicationAdapter {
    Stage stage;
    Skin skin;

    @Override
    public void create() {
        stage = new Stage();
        skin = new Skin(Gdx.files.internal("skin/default.json"));

        TextButton button = new TextButton("Click Me", skin);
        button.setPosition(100, 100);
        button.addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                System.out.println("Button clicked!");
            }
        });

        stage.addActor(button);
    }

    @Override
    public void render() {
        Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1); // ნაცრისფერი ფონი
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        stage.act();
        stage.draw();
    }

    @Override
    public void dispose() {
        stage.dispose();
        skin.dispose();
    }
}








